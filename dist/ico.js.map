{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/extractone.js","ico.js","src/ico.js","src/png.js","src/util.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","util","extractOne","buffer","index","dv","DataView","icoWidth","getUint8","icoHeight","icoOffset","getUint32","icoBit","getUint16","icoColorsOffset","icoColorsCount","icoXorOffset","icoAndOffset","toDividableBy4","ico","width","height","colorCount","bit","colors","xor","slice","and","push","to8bitArray","./util",2,"global","PNG","make1bitImageData","color","to1bitArray","xorLine","andLine","data","Uint8ClampedArray","h","w","make4bitImageData","to4bitArray","make8bitImageData","Uint8Array","make24bitImageData","make32bitImageData","previousICO","ICO","parse","icoDv","icos","encode","isICO","ArrayBuffer","noConflict","this","self","window","./extractone","./png",3,"createCanvas","document","canvas","createElement","Canvas","atob","str","Buffer","toString","dataURLToArrayBuffer","dataURL","string","replace","bytes","charCodeAt","image","ctx","getContext","imageData","createImageData","dataData","putImageData","toDataURL","undefined",4,"buff","byteLength","split","map","el","parseInt","num"],"mappings":"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","file":"ico.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var util = require('./util');\n\n/**\n * extract an icon from buffer\n * @param {ArrayBuffer} buffer ico buffer\n * @param {number} index index of icon\n * @returns {Object} ico parsed ico\n * @returns {Number} ico.width image width\n * @returns {Number} ico.height image height\n * @returns {Number} ico.colorCount color count\n * @returns {Number} ico.bit bit depth\n * @returns {Array[]} ico.colors color palette\n * @returns {ArrayBuffer} ico.xor xor image\n * @returns {ArrayBuffer} ico.and xor and\n */\nvar extractOne = function (buffer, index) {\n  var dv = new DataView(buffer);\n  var icoWidth = dv.getUint8(6 + index * 16) || 256;\n  var icoHeight = dv.getUint8(7 + index * 16) || 256;\n  var icoOffset = dv.getUint32(18 + index * 16, true);\n  var icoBit = dv.getUint16(icoOffset + 14, true);\n  var icoColorsOffset = dv.getUint32(18 + index * 16, true) + dv.getUint32(icoOffset, true);\n  var icoColorsCount = dv.getUint32(icoOffset + 32, true);\n  var icoXorOffset = icoColorsOffset + icoColorsCount * 4;\n  var icoAndOffset = icoXorOffset + util.toDividableBy4(icoWidth * icoBit / 8) * icoHeight;\n\n  var ico = {\n    width: icoWidth,\n    height: icoHeight,\n    colorCount: dv.getUint8(8 + index * 16),\n    bit: icoBit,\n    colors: [],\n    xor: buffer.slice(icoXorOffset, icoAndOffset),\n    and: buffer.slice(icoAndOffset, icoAndOffset + util.toDividableBy4(icoWidth / 8) * icoHeight)\n  };\n  for (var i = 0; i < icoColorsCount; i++) {\n    ico.colors.push(util.to8bitArray(buffer.slice(icoColorsOffset + i * 4, icoColorsOffset + i * 4 + 4)));\n  }\n\n  return ico;\n};\n\nmodule.exports = extractOne;\n",null,"/* global global: false */\n\nvar extractOne = require('./extractone');\nvar PNG = require('./png');\nvar util = require('./util');\n\n/**\n * make 1bit image imageData.data\n * @private\n * @param {Object} ico should have width, height, bit, colors, xor, and\n * @returns {Uint8ClampedArray} imageData.data\n */\nvar make1bitImageData = function (ico) {\n  var color;\n  var xor = util.to1bitArray(ico.xor);\n  var and = util.to1bitArray(ico.and);\n  var xorLine = util.toDividableBy4(ico.width * ico.bit / 8) * 8 / ico.bit;\n  var andLine = util.toDividableBy4(ico.width / 8) * 8;\n  var index = 0;\n  var data = new Uint8ClampedArray(ico.width * ico.height * 4);\n  for (var h = ico.height - 1; h >= 0; h--) {\n    for (var w = 0; w < ico.width; w++) {\n      color = ico.colors[xor[h * xorLine + w]];\n      data[index] = color[2];\n      data[index + 1] = color[1];\n      data[index + 2] = color[0];\n      data[index + 3] = and[h * andLine + w] ? 0 : 255;\n      index += 4;\n    }\n  }\n  return data;\n};\n\n/**\n * make 4bit image imageData.data\n * @private\n * @param {Object} ico should have width, height, bit, colors, xor, and\n * @returns {Uint8ClampedArray} imageData.data\n */\nvar make4bitImageData = function (ico) {\n  var color;\n  var xor = util.to4bitArray(ico.xor);\n  var and = util.to1bitArray(ico.and);\n  var xorLine = util.toDividableBy4(ico.width * ico.bit / 8) * 8 / ico.bit;\n  var andLine = util.toDividableBy4(ico.width / 8) * 8;\n  var index = 0;\n  var data = new Uint8ClampedArray(ico.width * ico.height * 4);\n  for (var h = ico.height - 1; h >= 0; h--) {\n    for (var w = 0; w < ico.width; w++) {\n      color = ico.colors[xor[h * xorLine + w]];\n      data[index] = color[2];\n      data[index + 1] = color[1];\n      data[index + 2] = color[0];\n      data[index + 3] = and[h * andLine + w] ? 0 : 255;\n      index += 4;\n    }\n  }\n  return data;\n};\n\n/**\n * make 8bit image imageData.data\n * @private\n * @param {Object} ico should have width, height, bit, colors, xor, and\n * @returns {Uint8ClampedArray} imageData.data\n */\nvar make8bitImageData = function (ico) {\n  var color;\n  var xor = new Uint8Array(ico.xor);\n  var and = util.to1bitArray(ico.and);\n  var xorLine = util.toDividableBy4(ico.width * ico.bit / 8) * 8 / ico.bit;\n  var andLine = util.toDividableBy4(ico.width / 8) * 8;\n  var index = 0;\n  var data = new Uint8ClampedArray(ico.width * ico.height * 4);\n  index = 0;\n  for (var h = ico.height - 1; h >= 0; h--) {\n    for (var w = 0; w < ico.width; w++) {\n      color = ico.colors[xor[h * xorLine + w]];\n      data[index] = color[2];\n      data[index + 1] = color[1];\n      data[index + 2] = color[0];\n      data[index + 3] = and[h * andLine + w] ? 0 : 255;\n      index += 4;\n    }\n  }\n  return data;\n};\n\n/**\n * make 24bit image imageData.data\n * @private\n * @param {Object} ico should have width, height, bit, xor, and\n * @returns {Uint8ClampedArray} imageData.data\n */\nvar make24bitImageData = function (ico) {\n  var xor = new Uint8Array(ico.xor);\n  var and = util.to1bitArray(ico.and);\n  var xorLine = util.toDividableBy4(ico.width * ico.bit / 8) * 8 / ico.bit;\n  var andLine = util.toDividableBy4(ico.width / 8) * 8;\n  var index = 0;\n  var data = new Uint8ClampedArray(ico.width * ico.height * 4);\n  for (var h = ico.height - 1; h >= 0; h--) {\n    for (var w = 0; w < ico.width; w++) {\n      data[index] = xor[(h * xorLine + w) * 3 + 2];\n      data[index + 1] = xor[(h * xorLine + w) * 3 + 1];\n      data[index + 2] = xor[(h * xorLine + w) * 3];\n      data[index + 3] = and[h * andLine + w] ? 0 : 255;\n      index += 4;\n    }\n  }\n  return data;\n};\n\n/**\n * make 32bit image imageData.data\n * @private\n * @param {Object} ico should have width, height, bit, xor, and\n * @returns {Uint8ClampedArray} imageData.data\n */\nvar make32bitImageData = function (ico) {\n  var xor = new Uint8Array(ico.xor);\n  var and = util.to1bitArray(ico.and);\n  var xorLine = util.toDividableBy4(ico.width * ico.bit / 8) * 8 / ico.bit;\n  var andLine = util.toDividableBy4(ico.width / 8) * 8;\n  var index = 0;\n  var data = new Uint8ClampedArray(ico.width * ico.height * 4);\n  for (var h = ico.height - 1; h >= 0; h--) {\n    for (var w = 0; w < ico.width; w++) {\n      data[index] = xor[(h * xorLine + w) * 4 + 2];\n      data[index + 1] = xor[(h * xorLine + w) * 4 + 1];\n      data[index + 2] = xor[(h * xorLine + w) * 4];\n      data[index + 3] = and[h * andLine + w] === 1 || xor[(h * xorLine + w) * 4 + 3] === 1 ? 0 : xor[(h * xorLine + w) * 4 + 3] > 1 ? xor[(h * xorLine + w) * 4 + 3] : 255;\n      index += 4;\n    }\n  }\n  return data;\n};\n\nvar previousICO = global.ICO;\n\n/**\n * @class ICO\n */\nvar ICO = {\n  /**\n   * Parse ICO and return some PNGs.\n   * @param {ArrayBuffer} buffer The ArrayBuffer object contain the TypedArray of a ICO file.\n   * @returns {Object[]} Array of parsed ICO.\n   * * .width <code>Number</code> - Image width.\n   * * .height <code>Number</code> - Image height.\n   * * .bit <code>Number</code> - Image bit depth.\n   * * .buffer <code>ArrayBuffer</code> - Image buffer.\n   */\n  parse: function (buffer) {\n    var icoDv = new DataView(buffer);\n    if (icoDv.getUint16(0, true) !== 0 || icoDv.getUint16(2, true) !== 1) {\n      throw new Error('buffer is not ico');\n    }\n    // make single image icon\n    var ico, data;\n    var icos = [];\n    // var idCount = icoDv.getUint16(4, true);\n    for (var i = 0; i < icoDv.getUint16(4, true); i++) {\n      ico = extractOne(buffer, i);\n      switch (ico.bit) {\n        case 1:\n          data = make1bitImageData(ico);\n          break;\n        case 4:\n          data = make4bitImageData(ico);\n          break;\n        case 8:\n          data = make8bitImageData(ico);\n          break;\n        case 24:\n          data = make24bitImageData(ico);\n          break;\n        case 32:\n          data = make32bitImageData(ico);\n          break;\n      }\n      icos.push({\n        bit: ico.bit,\n        width: ico.width,\n        height: ico.height,\n        buffer: PNG.encode({\n          width: ico.width,\n          height: ico.height,\n          data: data\n        })\n      });\n    }\n    return icos;\n  },\n  /**\n   * Check the ArrayBuffer is valid ICO.\n   * @param {ArrayBuffer} buffer The ArrayBuffer object contain the TypedArray of a ICO file.\n   * @returns {Boolean} True if arg is ICO.\n   */\n  isICO: function (buffer) {\n    if (!(buffer instanceof ArrayBuffer)) {\n      return false;\n    }\n    var icoDv = new DataView(buffer);\n    // idReserved = icoDv.getUint16(0, true)\n    // idType = icoDv.getUint16(0, true)\n    return icoDv.getUint16(0, true) === 0 && icoDv.getUint16(2, true) === 1;\n  },\n  /**\n   * No conflict.\n   * @returns {ICO}\n   */\n  noConflict: function () {\n    global.ICO = previousICO;\n    return this;\n  }\n};\n\nmodule.exports = ICO;\nglobal.ICO = ICO;\n","/* global global: false */\n\n/* istanbul ignore next */\nvar createCanvas = global.document ? function (width, height) {\n  var canvas = global.document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n} : function (width, height) {\n  var Canvas = require('canvas');\n  return new Canvas(width, height);\n};\n\n/* istanbul ignore next */\n/* jshint -W079 */\nvar atob = global.atob ? global.atob : function (str) {\n/* jshint +W079 */\n  var Buffer = require('buffer').Buffer;\n  return new Buffer(str, 'base64').toString('binary');\n};\n\nvar dataURLToArrayBuffer = function (dataURL) {\n  var string = atob(dataURL.replace(/.+,/, ''));\n  var bytes = new Uint8Array(string.length);\n  for (var i = 0; i < string.length; i++) {\n    bytes[i] = string.charCodeAt(i);\n  }\n  return bytes.buffer;\n};\n\nvar PNG = {\n  /**\n   * create png from imgData.data\n   * @param {Object} data\n   * @param {Number} image.width img width\n   * @param {Number} image.height img height\n   * @param {Uint8ClampedArray} image.data same as imageData.data\n   * @returns {ArrayBuffer} png\n   */\n  encode: function (image) {\n    var data = image.data;\n    var canvas = createCanvas(image.width, image.height);\n    var ctx = canvas.getContext('2d');\n    var imageData = ctx.createImageData(image.width, image.height);\n    var dataData = imageData.data;\n    for (var i = 0; i < dataData.length; i++) {\n      dataData[i] = data[i];\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return dataURLToArrayBuffer(canvas.toDataURL());\n  }\n  /**\n   * create imgData.data from png\n   * @param {ArrayBuffer} buffer png\n   * @returns {Object} data\n   * @returns {Number} image.width\n   * @returns {Number} image.height\n   * @returns {Uint8ClampedArray} image.data\n   */\n  /*decode: function (buffer) {\n  }*/\n};\n\nmodule.exports = PNG;\n","var util = {\n  /**\n   * convert ArrayBuffer to 1bit Array\n   * @param {ArrayBuffer} buffer\n   * @returns {Array}\n   */\n  to1bitArray: function (buffer) {\n    var buff = new Uint8Array(buffer);\n    var bit = '';\n    for (var i = 0; i < buff.byteLength; i++) {\n      bit += ('000000000' + buff[i].toString(2)).slice(-8);\n    }\n    return bit.split('').map(function (el) {\n      return parseInt(el, 2);\n    });\n  },\n  /**\n   * convert ArrayBuffer to 4bit Array\n   * @param {ArrayBuffer} buffer\n   * @returns {Array}\n   */\n  to4bitArray: function (buffer) {\n    var buff = new Uint8Array(buffer);\n    var bit = '';\n    for (var i = 0; i < buff.byteLength; i++) {\n      bit += ('00' + buff[i].toString(16)).slice(-2);\n    }\n    return bit.split('').map(function (el) {\n      return parseInt(el, 16);\n    });\n  },\n  /**\n   * convert ArrayBuffer to 8bit Array\n   * @param {ArrayBuffer} buffer\n   * @returns {Array}\n   */\n  to8bitArray: function (buffer) {\n    var buff = new Uint8Array(buffer);\n    var bit = [];\n    for (var i = 0; i < buff.byteLength; i++) {\n      bit.push(buff[i]);\n    }\n    return bit;\n  },\n  /**\n   * Make number dividable by 4\n   * @param {Number} num number\n   * @returns {Number} number dividable by 4\n   */\n  toDividableBy4: function (num) {\n    if (num % 4 !== 0) {\n      num += 4 - num % 4;\n    }\n    return num;\n  }\n};\n\nmodule.exports = util;\n"],"sourceRoot":"/source/"}